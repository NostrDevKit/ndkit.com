(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{366:function(e,t,a){"use strict";a.r(t);var s=a(6),r=Object(s.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"coinstr-cli"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#coinstr-cli"}},[e._v("#")]),e._v(" Coinstr CLI")]),e._v(" "),t("p",[e._v("This Coinstr CLI tutorial provides a step by step command line demo of using Coinstr to create and spend with a 2-of-2 multisignature. Step by step video included.")]),e._v(" "),t("figure",[t("img",{attrs:{src:"https://user-images.githubusercontent.com/32852271/227331892-d8447b4b-09be-4faf-9e05-b700350d1332.png",alt:"image"}})]),e._v(" "),t("h2",{attrs:{id:"step-by-step-2-of-2-multisig"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#step-by-step-2-of-2-multisig"}},[e._v("#")]),e._v(" Step by Step - 2 of 2 Multisig")]),e._v(" "),t("p",[e._v("This step by step guide shows how to create a 2 of 2 multisignature Bitcoin transaction using "),t("code",[e._v("coinstr-cli")]),e._v(".")]),e._v(" "),t("p",[e._v("For this tutorial, you'll need to "),t("a",{attrs:{href:"https://rustup.rs",target:"_blank",rel:"noopener noreferrer"}},[e._v("install rust"),t("OutboundLink")],1),e._v(" and also build Coinstr.")]),e._v(" "),t("h2",{attrs:{id:"step-1-build-coinstr"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#step-1-build-coinstr"}},[e._v("#")]),e._v(" Step 1. Build Coinstr")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" clone https://github.com/NostrDevKit/coinstr.git\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" coinstr\ncargo build --release\n")])])]),t("h2",{attrs:{id:"step-2-setup-keys"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#step-2-setup-keys"}},[e._v("#")]),e._v(" Step 2. Setup Keys")]),e._v(" "),t("p",[e._v("Create keys and save them to keychains. I've used the keychain names of "),t("code",[e._v("frank")]),e._v(" and "),t("code",[e._v("gary")]),e._v(".")]),e._v(" "),t("blockquote",[t("p",[e._v("NOTE: Mnemonics will be printed but they don't need to be saved for this tutorial.")])]),e._v(" "),t("p",[t("code",[e._v("--password")]),e._v(" is for encrypting your local keechain file, while "),t("code",[e._v("--passphrase")]),e._v(" is applied to your mnemonic and alters the keys. Below, the password is set to "),t("code",[e._v("1234")]),e._v(" and I am not using a passphrase.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('./target/release/coinstr-cli generate --password 1234 --passphrase "" frank\n./target/release/coinstr-cli generate --password 1234 --passphrase "" gary\n')])])]),t("h3",{attrs:{id:"inspect-keys"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#inspect-keys"}},[e._v("#")]),e._v(" Inspect Keys")]),e._v(" "),t("p",[e._v("We can inspect the keys we just created by running:")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("COINSTR_PASSWORD")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1234")]),e._v(" ./target/release/coinstr-cli --network testnet inspect frank\n")])])]),t("p",[e._v("This will show the mnemonic as well as useful key-related derived information for both Nostr and Bitcoin.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Mnemonic: document now all cable kitten recall outside song liquid still sister engine\nPassphrase: \n\nNostr\n Bech32 Keys\n  Public   : npub1tes4288tq3fprqwe44qzjh3jmnjac4sfc3sj5v3em0rqcvqgphxsj7652f \n  Private  : nsec1t5845hnslzfvveyazj3nlcy69qxz5564v5qh5mrueewcavxexmuqx2yv0h \n Hex Keys\n  Public   : 5e61551ceb04521181d9ad40295e32dce5dc5609c4612a3239dbc60c30080dcd \n  Private  : 5d0f5a5e70f892c6649d14a33fe09a280c2a535565017a6c7cce5d8eb0d936f8 \n  Normalized Public   : 035e61551ceb04521181d9ad40295e32dce5dc5609c4612a3239dbc60c30080dcd \n\nBitcoin\n  Root Private Key: tprv8ZgxMBicQKsPfDBozE3WYukpnYybXyUfFMAFbqARzft6USFZJpkkUQSzgo7FCew2zNbdbmnttL57qh3HLkBUd59TGonUBw2rTcENe8hMvLt\n  Extended Pub Key: tpubD6NzVbkrYhZ4YgDbssi6xKQwMaVXhJfZpem2tMCjQwgVJvWKwDaLeu4rrtRLSxUfZxBpMHCgL7zEsbjTDx8FuttBq49Hvnfddxmw5wyWaq3\n  Output Descriptor: tr([b3de2233/86'/1'/0']tpubDDr2LYycsYfkApXGXpsTKXz9yuwSYeeuPyNHTiS3bVzM3ab7CZifpVmk9CJxBa5Ueu5uakusH1NWWitQ1Kg8fwnVc6H9ad7RcSUSBx9GujA/0/*)#nhpcgk5a\n  Change Descriptor: tr([b3de2233/86'/1'/0']tpubDDr2LYycsYfkApXGXpsTKXz9yuwSYeeuPyNHTiS3bVzM3ab7CZifpVmk9CJxBa5Ueu5uakusH1NWWitQ1Kg8fwnVc6H9ad7RcSUSBx9GujA/1/*)#zrye4ry9\n  Ext Address 1: tb1pm5c5gpx4ljcg2qykhqkc3hr45mlphupqmh4kqyxt6wzhe4wk06rsh282k6\n  Ext Address 2: tb1pwg8mpatfm9fj5lavehfrrjr6yfm2043tjxf4dm05fgff7ha6an9s3y20d6\n  Change Address: tb1puakeecj6vuar3tvce7c7l6wxvj2tajjps2yesa24qhrk62jwzkpsggxmes\n")])])]),t("h2",{attrs:{id:"step-2-create-the-2-of-2-policy"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#step-2-create-the-2-of-2-policy"}},[e._v("#")]),e._v(" Step 2: Create the 2-of-2 Policy")]),e._v(" "),t("p",[e._v("Using miniscript, we will create a 2 of 2 multisignature policy that follows this format:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("thresh(2,pk(<FRANK_PUBKEY>),pk(<GARY_PUBKEY>))\n")])])]),t("p",[e._v("Inspect the keys you created above and paste your Nostr HEX public key into the miniscript template.")]),e._v(" "),t("p",[e._v("So, the miniscript for our 2 of 2 policy is (your keys will be different):")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("thresh(2,pk(5e61551ceb04521181d9ad40295e32dce5dc5609c4612a3239dbc60c30080dcd),pk(d223b67e6091ef0665188a4016d20a51a7bbb1b240fafc4429bf1329527338d1))\n")])])]),t("h2",{attrs:{id:"step-3-save-the-policy"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#step-3-save-the-policy"}},[e._v("#")]),e._v(" Step 3: Save the Policy")]),e._v(" "),t("p",[e._v("Save the policy using the key, policy name, policy description, and the output descriptor.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('COINSTR_PASSWORD=1234 \\\n./target/release/coinstr-cli save-policy \\\n    frank \\\n    "Multisig 2 of 2" \\\n    "Testing multisig as part of the Coinstr CLI tutorial" \\\n    "thresh(2,pk(5e61551ceb04521181d9ad40295e32dce5dc5609c4612a3239dbc60c30080dcd),pk(d223b67e6091ef0665188a4016d20a51a7bbb1b240fafc4429bf1329527338d1))"\n')])])]),t("p",[e._v("Now you can review the saved policies for frank using the following command:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("COINSTR_PASSWORD=1234 ./target/release/coinstr-cli get policies frank\n")])])]),t("p",[e._v("Produces:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("+---+------------------------------------------------------------------+-----------------+------------------------------------------------------+\n| # | ID                                                               | Name            | Description                                          |\n+===+==================================================================+=================+======================================================+\n| 1 | e2927eabd79c817df2e7e16be9f6125bba979259f41efe0f22cc9a33fc2b9824 | Multisig 2 of 2 | Testing multisig as part of the Coinstr CLI tutorial |\n+---+------------------------------------------------------------------+-----------------+------------------------------------------------------+\n")])])]),t("p",[e._v("You can see the details of the policy by calling "),t("code",[e._v("get policy")]),e._v(":")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("COINSTR_PASSWORD=1234 ./target/release/coinstr-cli --network testnet \\\n    get policy \\\n    frank \\\n    e2927eabd79c817df2e7e16be9f6125bba979259f41efe0f22cc9a33fc2b9824\n")])])]),t("blockquote",[t("p",[e._v("NOTE: Gary has the same policy saved into his list.")])]),e._v(" "),t("p",[e._v("Produces the following output:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Policy\n- ID: e2927eabd79c817df2e7e16be9f6125bba979259f41efe0f22cc9a33fc2b9824\n- Name: Multisig 2 of 2\n- Description: Testing multisig as part of the Coinstr CLI tutorial\n- Descriptor\n‚îî‚îÄ‚îÄ id -> 8hmw3yl0\n    ‚îî‚îÄ‚îÄ üëë Threshold Condition   : 1 of 2 \n        ‚îú‚îÄ‚îÄ id -> en4snfs4\n        ‚îÇ   ‚îî‚îÄ‚îÄ üîë Schnorr Sig of  <xonly-pk:bbbc8e8b39d46a289a51bd5029dde3c946b9e97be935dc1e59845aa3b36ae101>\n        ‚îî‚îÄ‚îÄ id -> eh682v0m\n            ‚îî‚îÄ‚îÄ ü§ù MultiSig  :  2 of 2\n                ‚îú‚îÄ‚îÄ üîë <xonly-pk:5e61551ceb04521181d9ad40295e32dce5dc5609c4612a3239dbc60c30080dcd>\n                ‚îî‚îÄ‚îÄ üîë <xonly-pk:d223b67e6091ef0665188a4016d20a51a7bbb1b240fafc4429bf1329527338d1>\n\nBalances\n- Immature            \t: 0 sats\n- Trusted pending     \t: 0 sats\n- Untrusted pending   \t: 0 sats\n- Confirmed           \t: 0 sats\n\nDeposit address: tb1pw3kszzyg67crrevpgxnfkyh3zn045hdqp56cgspkufvuefz9rllszm7kss\n")])])]),t("h2",{attrs:{id:"step-4-get-testnet-btc-from-faucet"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#step-4-get-testnet-btc-from-faucet"}},[e._v("#")]),e._v(" Step 4: Get Testnet BTC from Faucet")]),e._v(" "),t("p",[e._v("Use the "),t("a",{attrs:{href:"https://testnet-faucet.com/btc-testnet/",target:"_blank",rel:"noopener noreferrer"}},[e._v("testnet bitcoin faucet"),t("OutboundLink")],1),e._v(" to request BTC for our policy. The deposit address is at the bottom of the output above.")]),e._v(" "),t("h2",{attrs:{id:"step-5-generate-a-spend-proposal"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#step-5-generate-a-spend-proposal"}},[e._v("#")]),e._v(" Step 5: Generate a Spend Proposal")]),e._v(" "),t("p",[e._v("We will create the spend proposal from Alice's perspective. to create a spend proposal:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Usage: coinstr-cli spend <NAME> <POLICY_ID> <TO_ADDRESS> <AMOUNT> <MEMO>\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('COINSTR_PASSWORD=1234 ./target/release/coinstr-cli --network testnet spend \\\n    frank \\\n    e2927eabd79c817df2e7e16be9f6125bba979259f41efe0f22cc9a33fc2b9824 \\\n    mohjSavDdQYHRYXcS3uS6ttaHP8amyvX78 \\\n    1000 \\\n    "Send back to the faucet"\n')])])]),t("p",[e._v("You can now view the spend proposal:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("COINSTR_PASSWORD=1234 ./target/release/coinstr-cli get proposals frank\n")])])]),t("p",[e._v("Create the below table:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("+---+------------------------------------------------------------------+-----------+-------------------------+------------------------------------+------------+\n| # | ID                                                               | Policy ID | Memo                    | Address                            | Amount     |\n+===+==================================================================+===========+=========================+====================================+============+\n| 1 | 04ecf276638dc441aaac9eb8d6ae884f907e63d7f65d302515de5ada001d1e0e | e2927eabd | Send back to the faucet | mohjSavDdQYHRYXcS3uS6ttaHP8amyvX78 | 1 000 sats |\n+---+------------------------------------------------------------------+-----------+-------------------------+------------------------------------+------------+\n")])])]),t("h2",{attrs:{id:"step-6-approve-a-spend-proposal"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#step-6-approve-a-spend-proposal"}},[e._v("#")]),e._v(" Step 6: Approve a Spend Proposal")]),e._v(" "),t("p",[e._v("Now we need to approve the proposal from both Alice and Bob's perspective.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("./target/release/coinstr-cli --network testnet approve \\\n    frank \\\n    04ecf276638dc441aaac9eb8d6ae884f907e63d7f65d302515de5ada001d1e0e\n\n./target/release/coinstr-cli --network testnet approve \\\n    gary \\\n    04ecf276638dc441aaac9eb8d6ae884f907e63d7f65d302515de5ada001d1e0e\n")])])]),t("blockquote",[t("p",[e._v("NOTE: if you try to broadcast the transaction before it is finalized, you will get an error such as "),t("code",[e._v("PSBT not finalized: [InputError(CouldNotSatisfyTr, 0), InputError(CouldNotSatisfyTr, 1)]")]),e._v(".")])]),e._v(" "),t("h2",{attrs:{id:"step-7-broadcast-the-transaction"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#step-7-broadcast-the-transaction"}},[e._v("#")]),e._v(" Step 7: Broadcast the Transaction")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("./target/release/coinstr-cli --network testnet broadcast \\\n    gary \\\n    04ecf276638dc441aaac9eb8d6ae884f907e63d7f65d302515de5ada001d1e0e\n")])])]),t("p",[e._v("You will get a transaction-id that you can view with a block explorer:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Transaction 56294f3e8071d621d7158d2c2690faf05e9b7a81aeed7e6e6f312b0a8eb6e5b5 broadcasted\n\nExplorer: https://blockstream.info/testnet/tx/56294f3e8071d621d7158d2c2690faf05e9b7a81aeed7e6e6f312b0a8eb6e5b5 \n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);