(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{357:function(t,e,a){"use strict";a.r(e);var s=a(6),i=Object(s.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("div",{staticClass:"intro"},[e("h2",[t._v("Why NDK?")]),t._v(" "),e("p",[t._v("Easily integrate Lightning features into any Bitcoin wallet")])]),t._v(" "),e("div",{staticClass:"features"},[e("div",{staticClass:"feature"},[e("h3",[t._v("Multi-Language Support")]),t._v(" "),e("p",[t._v("We support native API's including Rust, C, Swift, Java & Kotlin so you can build Lightning applications in your preferred programming language.")])]),t._v(" "),e("div",{staticClass:"feature"},[e("h3",[t._v("Custom Persistent Storage")]),t._v(" "),e("p",[t._v("Our API's let you choose how to backup channel state. This gives you multi-wallet device access and lets you save state locally, to the cloud or an alternative backup scheme.")])]),t._v(" "),e("div",{staticClass:"feature"},[e("h3",[t._v("Custom Block Data Sources")]),t._v(" "),e("p",[t._v("Use a local full node, an SPV node, or your own Electrum server with API access to source data about the blockchain  and feed it to LDK for decision-making about whether to sign a state update.")])]),t._v(" "),e("div",{staticClass:"feature"},[e("h3",[t._v("Unified Wallet")]),t._v(" "),e("p",[t._v("No need to create separate Bitcoin & Lightning wallets, forcing users to backup an additional recovery phrase. Instead, we let you define your own wallet and create one unified experience.")])])])])}),[],!1,null,null,null);e.default=i.exports}}]);